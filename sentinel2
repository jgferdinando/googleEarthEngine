//Find cloud-free pixels, then create composite image (replace "median" with mode, mean, min, max as needed)
//modify date range as needed as well
//to save results to google drive, click 'run' in the tasks tab
function maskS2clouds(image) {
  var qa = image.select('QA60');

  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}

var dataset = ee.ImageCollection('COPERNICUS/S2')
                  .filterDate('2018-05-01', '2018-09-30')
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))
                  .map(maskS2clouds)
                  .median();

//color stretch values for screen and for google drive geotiff export:
var minimum = 0;
var maximum = 0.5;

var bands = ['B8', 'B4', 'B3'];

var rgbVis = {
  min: minimum,
  max: maximum,
  bands: bands,
};

//make layer visible in browser map
Map.addLayer(dataset, rgbVis, 'Multiband RGB Composite');

//export image to google drive
var trueColorRGB = dataset.visualize({
  bands: bands,
  min: minimum, max:maximum
});
Export.image.toDrive({
 image: trueColorRGB,
 description: 'trueColor',
 crs: 'EPSG:3857',
 scale: 10,
});

////////////////////////////////////////////////////////////////

//label bands with names for math
var aerosol = dataset.select("B1");
var blue = dataset.select("B2");
var green = dataset.select("B3");
var red = dataset.select("B4");
var redEdge1 = dataset.select("B5");
var redEdge2 = dataset.select("B6");
var redEdge3 = dataset.select("B7");
var nir = dataset.select("B8");
var redEdge4 = dataset.select("B8A");
var vapor = dataset.select("B9");
var cirrus = dataset.select("B10");
var swir1 = dataset.select("B11");
var swir2 = dataset.select("B12");

//create ndvi image and add to window
var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');
Map.addLayer(ndvi,{min:-1,max:1},'NDVI');
var exportNDVI = ndvi.visualize({
  min:-1, max:1});
Export.image.toDrive({
  image: exportNDVI,
  description: 'NDVIexport',
  scale: 10});

//create ratio images as needed
var ratio1 = redEdge4.divide(blue);
var ratio2 = green.divide(swir1);
var ratio3 = blue.divide(swir2);

//add an individual ratio image to map as a panchromatic image
Map.addLayer(ratio1);
 
//create a new multiband raster composed of the ratio images
var ratios = ee.Image([]);
var ratios = ratios
  .addBands(ratio1.rename('ratio1'))
  .addBands(ratio2.rename('ratio2'))
  .addBands(ratio3.rename('ratio3'))

var minimum = 0
var maximum = 1
 
var bands = ["ratio3", "ratio2", "ratio1"]
  
Map.addLayer(ratios, {bands: bands, min:minimum, max:maximum, opacity:1}, 'RGB Ratios')

var ratiosRGB = ratios.visualize({
  bands: bands,
  min:minimum, max:maximum});
Export.image.toDrive({
  image: ratiosRGB,
  description: 'RGBratios',
  scale: 10});
